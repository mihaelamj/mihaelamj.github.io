<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Aleahim.com</title><description></description><link>https://www.aleahim.com</link><atom:link
    href="https://www.aleahim.com/feed.rss"
    rel="self" type="application/rss+xml"
/><language>en</language><generator>Ignite v0.6.0</generator><image><url>https://www.aleahim.com/images/icon32.png</url><title>Aleahim.com</title><link>https://www.aleahim.com</link><width>32</width><height>32</height></image><item><guid isPermaLink="true">https://www.aleahim.com/CVBuilder</guid><title>CVBuilder: A Swift Package for Professional CV Management</title><link>https://www.aleahim.com/CVBuilder</link><description><![CDATA[CVBuilder is a powerful Swift package that I developed to solve a common problem: managing and rendering professional CVs in multiple formats. Whether you need to generate a Markdown CV for GitHub, an HTML version for your website, or a plain text version for job applications, CVBuilder has you covered.]]></description><pubDate>Sat, 13 Apr 2024 15:30:00 +0000</pubDate><dc:creator><![CDATA[Mihaela Mihaljeevic]]></dc:creator><category><![CDATA[Swift]]></category><category><![CDATA[Package]]></category><category><![CDATA[CV]]></category><category><![CDATA[Markdown]]></category><category><![CDATA[HTML]]></category><content:encoded><![CDATA[<p>CVBuilder is a powerful Swift package that I developed to solve a common problem: managing and rendering professional CVs in multiple formats. Whether you need to generate a Markdown CV for GitHub, an HTML version for your website, or a plain text version for job applications, CVBuilder has you covered.</p><h2>Why CVBuilder?</h2><p>In today’s digital world, professionals often need to maintain their CVs in multiple formats and keep them in sync. Traditional word processors make this process tedious and error-prone. CVBuilder solves this by:</p><ul><li>Providing a strongly-typed data model for CVs</li><li>Supporting multiple output formats (Markdown, HTML, plain text)</li><li>Making it easy to maintain a single source of truth</li><li>Enabling programmatic CV generation and updates</li></ul><h2>Core Features</h2><h3>1. Strongly Typed Data Model</h3><p>CVBuilder provides a comprehensive data model that covers all aspects of a professional CV:</p><pre><code class="language-swift">CV
├── ContactInfo
├── Education
├── WorkExperience
│   ├── Company
│   ├── Role
│   └── ProjectExperience
│       ├── Project
│       └── Tech
└── Period
</code></pre><p>Each component is strongly typed, ensuring data integrity and making it impossible to create invalid CVs.</p><h3>2. Multiple Renderers</h3><p>CVBuilder supports three different renderers out of the box:</p><ol><li><strong>MarkdownCVRenderer</strong>: Generates clean, well-formatted Markdown</li><li><strong>StringCVRenderer</strong>: Produces plain text output</li><li><strong>IgniteRenderer</strong>: Creates beautiful HTML using the Ignite static site generator</li></ol><h3>3. Modular Architecture</h3><p>The package is split into two main components:</p><ul><li><code>CVBuilder</code>: Core types and basic rendering</li><li><code>CVBuilderIgnite</code>: Optional HTML rendering support</li></ul><p>This separation ensures that projects that don’t need HTML rendering don’t have to pull in unnecessary dependencies.</p><h2>Getting Started</h2><h3>Installation</h3><p>Add CVBuilder to your project using Swift Package Manager:</p><pre><code class="language-swift">.package(url: "https://github.com/mihaelamj/cvbuilder.git", branch: "main")
</code></pre><p>Then add the desired product:</p><pre><code class="language-swift">.product(name: "CVBuilder", package: "cvbuilder"),
.product(name: "CVBuilderIgnite", package: "cvbuilder") // if using Ignite
</code></pre><h3>Creating a CV</h3><p>Here’s a simple example of creating a CV:</p><pre><code class="language-swift">import CVBuilder

// Create contact info
let contactInfo = ContactInfo(
    email: "jane.doe@example.com",
    phone: "+1 (555) 123-4567",
    linkedIn: URL(string: "https://linkedin.com/in/janedoe"),
    github: URL(string: "https://github.com/janedoe"),
    website: URL(string: "https://janedoe.dev"),
    location: "San Francisco, CA"
)

// Create education
let education = Education(
    institution: "Stanford University",
    degree: "B.S.",
    field: "Computer Science",
    period: Period(
        start: .init(month: 9, year: 2010),
        end: .init(month: 6, year: 2014)
    )
)

// Create the CV
let cv = CV.create(
    name: "Jane Doe",
    title: "Senior Mobile Developer",
    summary: "Passionate mobile developer with 5+ years experience...",
    contactInfo: contactInfo,
    education: [education],
    projects: [project1, project2]
)
</code></pre><h3>Generating Output</h3><p>Once you have your CV data model, generating different formats is straightforward:</p><pre><code class="language-swift">// Generate Markdown
let markdown = MarkdownCVRenderer(cv: cv).render()

// Generate plain text
let plainText = StringCVRenderer(cv: cv).render()

// Generate HTML (requires CVBuilderIgnite)
let html = IgniteRenderer(cv: cv).render()
</code></pre><h2>Advanced Features</h2><h3>Project Builder Pattern</h3><p>CVBuilder includes a builder pattern for creating project experiences:</p><pre><code class="language-swift">let project = try! Project.Builder()
    .withName("iOS App Redesign")
    .withCompany(appleCompany)
    .withRole(seniorIOS)
    .withPeriod(start: (month: 3, year: 2020), end: (month: 9, year: 2021))
    .addDescription("Led a team of 5 developers...")
    .withTechs([swift, swiftUI])
    .build()
</code></pre><h3>Tech Stack Management</h3><p>The package includes a <code>Tech</code> type for managing technical skills:</p><pre><code class="language-swift">let swift = Tech(name: "Swift", category: .language)
let swiftUI = Tech(name: "SwiftUI", category: .framework)
let restAPI = Tech(name: "REST API", category: .concept)
</code></pre><h2>How I Use It on This Webpage</h2><p>My blog is built using <a href="https://github.com/twostraws/Ignite">Ignite</a>, a static site generator for Swift. I’ve integrated CVBuilder into my website to maintain and display my CV in a clean, professional format.</p><h3>Package Dependencies</h3><p>I include CVBuilder in my website’s package file:</p><pre><code class="language-swift">let package = Package(
    name: "IgniteStarter",
    platforms: [.macOS(.v13)],
    dependencies: [
        .package(url: "https://github.com/twostraws/Ignite.git", branch: "main"),
        .package(url: "https://github.com/mihaelamj/cvbuilder.git", branch: "main")
    ],
    targets: [
        .executableTarget(
            name: "IgniteStarter",
            dependencies: [
                .product(name: "Ignite", package: "Ignite"),
                .product(name: "CVBuilder", package: "cvbuilder"),
                .product(name: "CVBuilderIgnite", package: "cvbuilder")
            ]
        ),
    ]
)
</code></pre><h3>Personal Information</h3><p>I maintain my personal information in a dedicated Swift file (<code>CV+Mihaela.swift</code>):</p><pre><code class="language-swift">public extension CV {
    static func createForMihaela() -> CV {
        let contactInfo = ContactInfo(
            email: "me@me.com",
            phone: "+12233445566",
            linkedIn: URL(string: "https://www.linkedin.com/in/mylinkedin"),
            github: URL(string: "https://github.com/mygithub"),
            website: URL(string: "https://mywebsite.com"),
            location: "City, Country"
        )
        
        let education = Education(...)
        
        // ... rest of the implementation
    }
}
</code></pre><p><img src="https://www.aleahim.com/images/cvbuilder/cv01.png" alt="" class="img-fluid"></p><h3>Project History</h3><p>My professional experience is organized in a separate file (<code>CV+Projects.swift</code>), which contains detailed information about all my projects:</p><pre><code class="language-swift">public extension CV {
    static func createMihaelasProjects() -> [Project] {
        var result = [Project]()
        
        // Create companies
        let undabot = Company(name: "Undabot")
        let token = Company(name: "Token")
        // ... more companies
        
        // Create tech skills
        let swift = Tech(name: "Swift", category: .language)
        let uiKit = Tech(name: "UIKit", category: .framework)
        // ... more tech skills
        
        // Create projects using the builder pattern
        let project1 = try! Project.Builder()
            .withName("SomeProject")
            .withCompany(Company name)
            .withRole(juniorIOS)
            .withPeriod(start: (month: 9, year: 20XX), end: (month: 12, year: 20XX))
            .addDescription("iOS (iPad) book application about...)
            .withTechs([swift, uiKit])
            .build()
        
        // ... more projects
        
        return result
    }
}
</code></pre><p>This modular approach allows me to:</p><ol><li>Keep my CV data in a strongly-typed format</li><li>Easily update my experience and skills</li><li>Generate both HTML and Markdown versions of my CV</li><li>Maintain consistency across different platforms</li></ol><p>The CV is automatically generated when the website is built, ensuring that my professional information is always up-to-date and consistently formatted.</p><h3>Markdown Generation</h3><p>I also generate a Markdown version of my CV that I can use to create a fresh PDF whenever needed. This is done using a simple function:</p><pre><code class="language-swift">func generateMihaelasCVMarkdownInContentFolder() {
    let cv = CV.createForMihaela()
    let markdown = MarkdownCVRenderer().render(cv: cv)

    let fileURL = URL(fileURLWithPath: "Assets/mihaela-cv.md")

    do {
        try markdown.write(to: fileURL, atomically: true, encoding: .utf8)
        print("✅ Written to \(fileURL.path)")
    } catch {
        print("❌ Failed to write Mihaela's CV: \(error.localizedDescription)")
    }
}
</code></pre><p>This function:</p><ol><li>Creates my CV using the <code>createForMihaela()</code> function</li><li>Renders it to Markdown using <code>MarkdownCVRenderer</code></li><li>Saves the output to <code>Assets/mihaela-cv.md</code></li><li>Provides feedback about the success or failure of the operation</li></ol><p>I can then use this Markdown file to generate a fresh PDF whenever I need to update my CV for job applications or other purposes.</p><h2>Future Plans</h2><p>CVBuilder is actively maintained and has several planned improvements:</p><ol><li>Command-line interface for CV generation</li><li>Additional renderers (PDF, LaTeX)</li><li>Import/export functionality for common formats</li><li>Template system for customizing output</li></ol><h2>Conclusion</h2><p>CVBuilder provides a robust solution for managing professional CVs in Swift. Its type-safe design, multiple renderers, and modular architecture make it an excellent choice for developers who want to maintain their CVs programmatically.</p><p>Whether you’re building a personal website, managing multiple CV versions, or creating a CV management system, CVBuilder can help streamline your workflow and ensure consistency across all your professional documents.</p><h2>Resources</h2><ul><li><a href="https://github.com/mihaelamj/cvbuilder">GitHub Repository</a></li><li><a href="https://github.com/mihaelamj/cvbuilder/blob/main/SampleCV.md">Sample CV</a></li><li><a href="https://github.com/mihaelamj/cvbuilder#readme">Documentation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.aleahim.com/SwiftUILabAdvancedAnimations</guid><title>Bringing Advanced SwiftUI Animations to macOS</title><link>https://www.aleahim.com/SwiftUILabAdvancedAnimations</link><description><![CDATA[When I first discovered SwiftUILab’s Advanced Animations, I was impressed by the beautiful animations and transitions it demonstrated. However, I noticed that these examples were primarily focused on iOS, leaving macOS developers without a clear path to implement similar effects. This inspired me to create SwiftUILab_AdvancedAnimations, a port of these animations that works seamlessly on both iOS and macOS.]]></description><pubDate>Sun, 13 Feb 2022 16:30:00 +0000</pubDate><dc:creator><![CDATA[Mihaela Mihaljeevic]]></dc:creator><category><![CDATA[Swift]]></category><category><![CDATA[SwiftUI]]></category><category><![CDATA[Animation]]></category><category><![CDATA[macOS]]></category><category><![CDATA[iOS]]></category><content:encoded><![CDATA[<p>When I first discovered <a href="https://swiftui-lab.com/advanced-animations/">SwiftUILab’s Advanced Animations</a>, I was impressed by the beautiful animations and transitions it demonstrated. However, I noticed that these examples were primarily focused on iOS, leaving macOS developers without a clear path to implement similar effects. This inspired me to create <a href="https://github.com/mihaelamj/SwiftUILab_AdvancedAnimations">SwiftUILab_AdvancedAnimations</a>, a port of these animations that works seamlessly on both iOS and macOS.</p><h2>The Challenge</h2><p>SwiftUI’s animation system is powerful but can behave differently across platforms. While iOS and macOS share the same SwiftUI framework, there are subtle differences in how animations are handled, especially when dealing with:</p><ul><li>Gesture recognizers</li><li>View transitions</li><li>Animation timing</li><li>Platform-specific UI elements</li></ul><p>My goal was to create a unified codebase that would work flawlessly on both platforms while maintaining the original animations’ elegance and performance.</p><h2>Project Structure</h2><p>I organized the project to make it easy to understand and extend:</p><pre><code>SwiftUILab_AA/
├── Examples/
│   ├── Animation1/
│   ├── Animation2/
│   └── ...
├── Shared/
│   ├── Views/
│   ├── Models/
│   └── Extensions/
└── App/
    ├── iOS/
    └── macOS/
</code></pre><p>Each animation example has its own folder, making it easy to:</p><ul><li>Study individual animations in isolation</li><li>Copy and paste specific animations into other projects</li><li>Modify and experiment with different parameters</li></ul><h2>Key Features</h2><h3>1. Cross-Platform Compatibility</h3><p>The project uses SwiftUI’s platform-agnostic features while handling platform-specific requirements:</p><pre><code class="language-swift">#if os(iOS)
    // iOS-specific code
#elseif os(macOS)
    // macOS-specific code
#endif
</code></pre><h3>2. Reusable Components</h3><p>I created a set of reusable components that work on both platforms:</p><pre><code class="language-swift">struct AnimatedButton: View {
    @State private var isPressed = false
    
    var body: some View {
        Button(action: {}) {
            Text("Animate")
                .scaleEffect(isPressed ? 0.95 : 1.0)
                .animation(.spring(), value: isPressed)
        }
        .buttonStyle(PlainButtonStyle())
        .onHover { hovering in
            isPressed = hovering
        }
    }
}
</code></pre><h3>3. Gesture Handling</h3><p>The project includes platform-appropriate gesture handling:</p><pre><code class="language-swift">struct DragGestureView: View {
    @State private var offset = CGSize.zero
    
    var body: some View {
        Rectangle()
            .fill(Color.blue)
            .frame(width: 100, height: 100)
            .offset(offset)
            .gesture(
                DragGesture()
                    .onChanged { value in
                        offset = value.translation
                    }
                    .onEnded { _ in
                        withAnimation(.spring()) {
                            offset = .zero
                        }
                    }
            )
    }
}
</code></pre><h2>Example Animations</h2><h3>1. Morphing Shapes</h3><p>One of the most impressive animations is the shape morphing effect:</p><pre><code class="language-swift">struct MorphingShape: View {
    @State private var isMorphed = false
    
    var body: some View {
        Circle()
            .fill(Color.blue)
            .frame(width: 100, height: 100)
            .scaleEffect(isMorphed ? 1.5 : 1.0)
            .animation(.spring(response: 0.6, dampingFraction: 0.6), value: isMorphed)
            .onTapGesture {
                isMorphed.toggle()
            }
    }
}
</code></pre><h3>2. Custom Transitions</h3><p>The project includes several custom transitions that work on both platforms:</p><pre><code class="language-swift">extension AnyTransition {
    static var customScale: AnyTransition {
        .scale(scale: 0.1)
        .combined(with: .opacity)
    }
}
</code></pre><h2>Implementation Details</h2><h3>1. View Extensions</h3><p>I created several extensions to make animations more reusable:</p><pre><code class="language-swift">extension View {
    func animateOnHover() -> some View {
        self.modifier(HoverAnimationModifier())
    }
}
</code></pre><h3>2. Animation Timing</h3><p>Careful attention was paid to animation timing to ensure smooth performance:</p><pre><code class="language-swift">struct TimingAnimation: View {
    @State private var isAnimating = false
    
    var body: some View {
        Circle()
            .fill(Color.red)
            .frame(width: 50, height: 50)
            .offset(y: isAnimating ? -100 : 0)
            .animation(
                .timingCurve(0.68, -0.6, 0.32, 1.6, duration: 1),
                value: isAnimating
            )
            .onAppear {
                isAnimating = true
            }
    }
}
</code></pre><h2>Benefits for Developers</h2><ol><li><strong>Cross-Platform Learning</strong>: Developers can learn SwiftUI animations that work on both iOS and macOS</li><li><strong>Ready-to-Use Examples</strong>: Each animation is self-contained and can be easily copied into other projects</li><li><strong>Performance Optimized</strong>: Animations are optimized for smooth performance on both platforms</li><li><strong>Educational Resource</strong>: The project serves as a comprehensive guide to SwiftUI animations</li></ol><h2>Future Improvements</h2><p>The project is actively maintained with several planned enhancements:</p><ol><li>Adding more complex animation examples</li><li>Implementing accessibility features</li><li>Creating a documentation site with interactive examples</li><li>Adding support for visionOS</li></ol><h2>Conclusion</h2><p>SwiftUILab_AdvancedAnimations bridges the gap between iOS and macOS animation development in SwiftUI. By providing a unified codebase and clear examples, it helps developers create beautiful, performant animations that work across Apple’s platforms.</p><p>Whether you’re building for iOS, macOS, or both, this project provides valuable insights into SwiftUI’s animation capabilities and best practices for cross-platform development.</p><h2>Resources</h2><ul><li><a href="https://github.com/mihaelamj/SwiftUILab_AdvancedAnimations">GitHub Repository</a></li><li><a href="https://swiftui-lab.com/advanced-animations/">Original SwiftUILab Article</a></li><li><a href="https://developer.apple.com/documentation/swiftui">SwiftUI Documentation</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.aleahim.com/CoreAnimation3DCube</guid><title>Core Animation Layers forming a 3D cube</title><link>https://www.aleahim.com/CoreAnimation3DCube</link><description><![CDATA[]]></description><pubDate>Sat, 06 Mar 2021 15:30:00 +0000</pubDate><dc:creator><![CDATA[Mihaela Mihaljeevic]]></dc:creator><category><![CDATA[Core Animation]]></category><category><![CDATA[Swift]]></category><category><![CDATA[Objective-C]]></category><category><![CDATA[UIKit]]></category><category><![CDATA[AppKit]]></category><content:encoded><![CDATA[<p><img src="https://www.aleahim.com/images/cacube/01_cube_iOS_3D.png" alt="" class="img-fluid"></p><p>I’ve been researching <code>Core Animation</code> framework for the past few months.<br />I’ve started with several books on the subject, but I found watching related WWDC videos most rewarding. The presenters put the content in a relevant context which  makes it easier to apprehend and learn from it.</p><h2>1. Introduction</h2><p>One WWDC session particularly intrigued me: “2011–421 Core Animation Essentials”. They presented their demo named: “Layers in Perspective”, and it showed six layers, forming a flattened cube: <img src="https://www.aleahim.com/images/cacube/02_cube_5sides.png" alt="" class="img-fluid"></p><p>The sixth layer is hiding behind the layer number 5. It has a lower <code>zPosition</code> then the layer above it.</p><p><img src="https://www.aleahim.com/images/cacube/03_cube_6sides.png" alt="" class="img-fluid"></p><p>They have also demonstrated opening and closing the cube formation.</p><p><img src="https://www.aleahim.com/images/cacube/04_cube_filmstrip.png" alt="" class="img-fluid"></p><p>So, I have decided to demonstrate that.</p><p>Here’s a link to a GitHub repo with the source code:<br /><a href="https://github.com/mihaelamj/CubeIn3DWithCoreAnimation">Core Animation 3D Cube</a></p><p>Here’s the animation:</p><p><img src="https://www.aleahim.com/images/cacube/05_CoreAnimation_3D_Cube.gif" alt="" class="img-fluid"></p><p>You can also see it on <a href="https://www.youtube.com/watch?v=exIGbi36_bk">You Tube</a></p><p>Layers in <code>Core Animation</code> live in <code>3D</code> geometry. But a layer is a <code>2D</code> construct, so <code>Core Animation</code> coordinate space is called a <code>2.5D</code> geometry.</p><p>To illustrate that just see what happens when you mess up your transformations.</p><p><img src="https://www.aleahim.com/images/cacube/06_Intersecting_Layers.png" alt="" class="img-fluid"></p><p>Layers are <code>2D</code> objects, they don’t understand the third dimension.<br />They are like playing cards in space., and there is no <code>depth buffer</code> available.</p><p>And also, intersecting layers should be avoided because in the image above, Core Animation needs to do a lot of work. So just to draw the <code>red</code> layer intersecting only the <code>blue</code> layer, Core Animation needs to</p><ul><li>cut the <code>red</code> layer into two pieces</li><li>render back part of the <code>red</code> layer</li><li>then render the full <code>blue</code> layer</li><li>then render the front part of the <code>red</code> layer again And all that work is for just intersection, and here we have multiple.</li></ul><h2>2. Building the Cube in 3D</h2><h3>2.1. Setting up the multi-platform project</h3><p>I wanted the project to fun on the <code>macOS</code> , <code>iOS</code> and <code>iPadOS</code>, so I used <a href="https://github.com/mihaelamj/allapples">AllApples</a> Swift package.</p><p>After removing the storyboards and pimping up the <code>AppDelegate</code> and <code>main.swift</code> for the <code>macOS</code> version, and <code>SceneDelegate</code> for the mobile versions, I was ready to start.</p><h4>2.1.1. <code>main.swift</code> for the macOS</h4><pre><code class="language-swift">import Cocoa
let delegate = AppDelegate()
NSApplication.shared.delegate = delegate
_ = NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv)
</code></pre><h4>2.1.2. AppDelegate for the <code>macOS</code></h4><pre><code class="language-swift">import Cocoa
import AllApples

class AppDelegate: NSObject, NSApplicationDelegate {
  private var window: NSWindow?
  func applicationDidFinishLaunching(_ aNotification: Notification) {
    window = AppSceneDelegate.makeWindow_Mac(theVC: CommonViewController())
  }
}
</code></pre><h4>2.1.3. SceneDelegate for the <code>iOS</code> and <code>iPadOS</code></h4><pre><code class="language-swift">import UIKit
import AllApples

class SceneDelegate: UIResponder, UIWindowSceneDelegate {
  var window: UIWindow?
  func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
    guard let aScene = (scene as? UIWindowScene) else { return }
    window = AppSceneDelegate.makeWindow_iOS(theScene: aScene, theVC: CommonViewController())
  }
}
</code></pre><h3>2.2. Building the Basic Blocks</h3><p>The first I did is make a <code>PlainLayerView </code>. It is an <code>AView</code> descendant, which means that it is <code>typedef-ed</code> to be either a <code>UIView</code> or a <code>NSView</code>.</p><p>It is an intermediary object just to set up a thing on the <code>macOS</code> as well (doesn’t work yet).</p><p>I then created <code>CustomLayerView</code> to have nice sides for the cube, with <code>CATextLayer</code> as the number of the cube side, and a nice rounded border, so that we can peek into our cube while rotating.</p><p>Here’s the image of all six layers drawn by using a <code>CustomLayerView</code></p><p><img src="https://www.aleahim.com/images/cacube/07_original_abandoned_cube_layout.png" alt="" class="img-fluid"></p><p>This layout was abandoned because I couldn’t make the transformation of <code>purple</code> view to work when transforming in <code>3D</code>.</p><p><img src="https://www.aleahim.com/images/cacube/08_side4_broken.png" alt="" class="img-fluid"></p><p>The solution is to add an additional <code>CATransformLayer</code> to the <code>green</code> layer, and mount the <code>purple</code> layer onto it. As explained in this blog post by Oliver Drobnik <a href="https://www.cocoanetics.com/2012/08/cubed-coreanimation-conundrum/"> Cubed CoreAnimation Conundrum.</a></p><p>But I didn’t want to lose the linearity of the solution, and I used the approach demonstrated in the mentioned WWDC session: “2011–421 Core Animation Essentials”</p><p>They used the <code>zOrder</code> property of a layer, and so I put <code>purple</code> layer on top of the <code>red</code> layer to achieve that.</p><pre><code class="language-swift">    if number == 4 {
      view.layer.zPosition = 1
    }
</code></pre><p>As you can see in the image below, the <code>purple</code> layer is in front of the <code>red</code> layer, which is obvious when we rotate the flattened cube.</p><p><img src="https://www.aleahim.com/images/cacube/09_layers_zPosition.png" alt="" class="img-fluid"></p><h3>2.3. Turning the Transform On and Off</h3><p>I did take the approach that Over Drobnik did in his article: <a href="https://www.cocoanetics.com/2012/08/cubed-coreanimation-conundrum/"> Cubed CoreAnimation Conundrum </a>, and used it like this:</p><pre><code class="language-swift">	side4.layer?.zPosition = on ? CACube3DView.sideWidth : 1
    side1.layer?.transform = on ? CATransform3D.transformFor3DCubeSide(1, zWidth: CACube3DView.sideWidth)  : CATransform3DIdentity
    side2.layer?.transform = on ? CATransform3D.transformFor3DCubeSide(2, zWidth: CACube3DView.sideWidth)  : CATransform3DIdentity
    side3.layer?.transform = on ? CATransform3D.transformFor3DCubeSide(3, zWidth: CACube3DView.sideWidth)  : CATransform3DIdentity
    side4.layer?.transform = on ? CATransform3D.transformFor3DCubeSide(4, zWidth: CACube3DView.sideWidth)  : CATransform3DIdentity
    side5.layer?.transform = on ? CATransform3D.transformFor3DCubeSide(5, zWidth: CACube3DView.sideWidth)  : CATransform3DIdentity
    side6.layer?.transform = on ? CATransform3D.transformFor3DCubeSide(6, zWidth: CACube3DView.sideWidth)  : CATransform3DIdentity
</code></pre><h3>2.4. Transforming the Layers to Form a Cube</h3><p>I didn’t use his transform code, since he used that additional <code>CATransformLayer</code>, so it wouldn’t work. So, here’s a small extension on the <code>CATransform3D</code></p><pre><code class="language-swift">public extension CATransform3D {
  static func transformFor3DCubeSide(_ number: Int, zWidth: CGFloat) -> CATransform3D {
    
    let halfPi = CGFloat(Double.pi) / 2.0
    var trans = CATransform3DIdentity
    switch number {
      case 1:
        trans = CATransform3DMakeRotation(halfPi, 0, 1, 0)
        break
      case 2:
        trans = CATransform3DIdentity
        break
      case 3:
        trans = CATransform3DMakeRotation(-halfPi, 0, 1, 0)
        break
      case 4:
        trans = CATransform3DMakeTranslation(0, 0, zWidth)
        break
      case 5:
        trans = CATransform3DMakeRotation(-halfPi, 1, 0, 0)
        break
      case 6:
        trans = CATransform3DMakeRotation(halfPi, 1, 0, 0)
        break
      default:
        break
    }
    return trans
  }
}
</code></pre><p>I actually used the approach form that WWDC session, and also used <code>anchorPoint</code> properties of the <code>CALayer</code>.</p><h3>2.5. Positioning Cube Sides</h3><p>Here’s a little extension on <code>CGPoint</code> that returns a tuple of our cube side positions and anchor points:</p><pre><code class="language-swift">public extension CGPoint {
  static func anchorPointAndPositionForCubeSideLayer(number: Int, sideSize: CGFloat) -> (anchorPoint: CGPoint, position: CGPoint) {
    var resultAnchorPoint = CGPoint(x:0.5, y:0.5)
    var resultPosition = CGPoint(x:0.0, y:0.0)
    let halfSideSize: CGFloat = sideSize / 2.0
    switch number {
      case 1:
        resultAnchorPoint = CGPoint(x:1.0, y:0.5)
        resultPosition = CGPoint(x:-halfSideSize, y:0.0)
        break
      case 2:
        resultAnchorPoint = CGPoint(x:0.5, y:0.5)
        resultPosition = CGPoint(x:0.0, y:0.0)
        break
      case 3:
        resultAnchorPoint = CGPoint(x:0.0, y:0.5)
        resultPosition = CGPoint(x:halfSideSize, y:0.0)
        break
      case 4:
        resultAnchorPoint = CGPoint(x:0.5, y:0.5)
        resultPosition = CGPoint(x:0.0, y:0.0)
        break
      case 5:
        resultAnchorPoint = CGPoint(x:0.5, y:1.0)
        resultPosition = CGPoint(x:0.0, y:-halfSideSize)
        break
      case 6:
        resultAnchorPoint = CGPoint(x:0.5, y:0.0)
        resultPosition = CGPoint(x:0.0, y:halfSideSize)
        break
      default:
        break
    }
    return (anchorPoint: resultAnchorPoint, position: resultPosition)
  }
}
</code></pre><p>In the image below I have marked where the <code>anchor points</code> are for each layer:</p><p><img src="https://www.aleahim.com/images/cacube/10_anchor_points.png" alt="" class="img-fluid"></p><p>The only fallacy in the image above, is that the <code>purple</code> layer is actually above our <code>red layer</code>, but I wanted to show where those anchor points are.<br />So, the actual image looks like this, but we now don’t see the <code>red</code> layer. <img src="https://www.aleahim.com/images/cacube/11_anchor_points.png" alt="" class="img-fluid"></p><p>An Anchor point is a center of rotation. It determines how will the layer rotate.<br />Imagine holding a playing card with two fingers. Then try to spin the card. The anchor point of that card is where you are holding it with fingers.</p><h2>3. Responding to Gestures</h2><p>I made a small <code>GestureRecognizerView</code> to be able to respond to gestures and move, rotate and scale our layers.</p><p>It hooks-up:</p><ul><li><code>NSPanGestureRecognizer</code> and <code>UIPanGestureRecognizer</code></li><li><code>func rotate(with event: NSEvent)</code> and <code>UIRotationGestureRecognizer</code></li><li><code>NSClickGestureRecognizer</code> and <code>UITapGestureRecognizer</code></li><li><code>func magnify(with event: NSEvent)</code> and <code>UIPinchGestureRecognizer</code></li></ul><p>It then exposes all those events to the developer to use:</p><pre><code class="language-swift">public extension GestureRecognizerView {
  @objc func rotationChanged(degrees: Float) {}
  @objc func rotationChanged(radians: Float) {}
  @objc func displacementChanged(displacement: CGPoint) {}
  @objc func scaleChanged(scale: CGFloat) {}
  @objc func tapHappened() {}
}
</code></pre><h2>4. Building a Layer to hold a Cube</h2><p><code>CACube3DView</code> will hold the six layers than (can) make a cube. In order for <code>Core Animation</code> to render the transformed views in perspective, there is a property <code>sublayerTransform</code>.</p><p>You either use that property of your parent layer, or add another layer class to your layer hierarchy: <code>CATransformLayer</code>. I opted to use that.</p><pre><code class="language-swift">private(set) public lazy var transformedLayer: CALayer = {
    let l = CATransformLayer()
    l.name = "Transform Layer"
    #if os(OSX)
    l.isGeometryFlipped = true
    #endif
    return l
}()
</code></pre><p>When adding sublayers, I add them to this <code>transformedLayer</code> property, and not my view’s layer.</p><pre><code class="language-swift">func addSideSubview(_ subview: AView) {
    addSubview(subview)
    
    #if os(iOS) || os(tvOS)
    transformedLayer.addSublayer(subview.layer)
    #endif
    
    #if os(OSX)
    if let aLayer = subview.layer {
      transformedLayer.addSublayer(aLayer)
    } else {
      fatalError("`subview.layer` == `nil`")
    }
    #endif
}
</code></pre><h2>5. Perspective & Rotation</h2><p>When the app first runs it shows in perspective.<br />I made a little extension:</p><pre><code class="language-swift">public extension CATransform3D {
  static func somePerspectiveTransform() -> CATransform3D {
    var perspective = CATransform3DIdentity;
    perspective.m34 = -1.0 / 500.0;
    perspective = CATransform3DRotate(perspective, CGFloat(Double.pi) / 8, 1, 0, 0);
    perspective = CATransform3DRotate(perspective, CGFloat(Double.pi) / 8, 0, 1, 0);
    perspective = CATransform3DScale(perspective, 0.7, 0.7, 0.7)
    return perspective
  }
}
</code></pre><p>The part: <code>perspective.m34 = -1.0 / 500.0;</code> sets the perspective. The <code>.34</code> field of a matrix shows the amount of perspective distortion applied. The amount <code>500</code> is often used in examples. If it were smaller, the layers would seem very close and distorted, like a fish-eye effect.</p><p>This is the initial transform, but we want to be able to move and rotate our cube (flattened or not) with our fingers.</p><p>Here’s the code:</p><pre><code class="language-swift">public extension CATransform3D {
  
  func rotationFromDisplacement(_ displacement: CGPoint, sideWidth: CGFloat, is3D: Bool) -> CATransform3D {
    
    var currentTransform = self
    
    let totalRotation: CGFloat = sqrt(displacement.x * displacement.x + displacement.y * displacement.y)
    let angle: CGFloat = totalRotation * .pi / 180.0
    
    let xRotationFactor = displacement.x / angle
    let yRotationFactor = displacement.y / angle
    
    if is3D {
      currentTransform = CATransform3DTranslate(currentTransform, 0, 0, sideWidth / 2.0)
    }
    
    var rotationalTransform = CATransform3DRotate(currentTransform, angle,
                                                  (xRotationFactor * currentTransform.m12 - yRotationFactor * currentTransform.m11),
                                                  (xRotationFactor * currentTransform.m22 - yRotationFactor * currentTransform.m21),
                                                  (xRotationFactor * currentTransform.m32 - yRotationFactor * currentTransform.m31))
    
    if (is3D) {
      rotationalTransform = CATransform3DTranslate(rotationalTransform, 0, 0, -sideWidth / 2.0);
    }
    
    return rotationalTransform
  }
}
</code></pre><p>We call it from our pan-gesture methods</p><pre><code class="language-swift">  override func displacementChanged(displacement: CGPoint) {  
    guard !(displacement.x == 0 && displacement.y == 0) else { return }
    
    let rotationTransform = transformedLayer.sublayerTransform.rotationFromDisplacement(displacement, sideWidth: CACube3DView.sideWidth, is3D: isOn)
    transformedLayer.sublayerTransform = rotationTransform
  }
</code></pre><p>We hooked up the pan-gestures prior:</p><pre><code class="language-swift">#if os(OSX)
private func setupPanGestureRecognizer() {
    let panGR = NSPanGestureRecognizer(target: self, action: #selector(handlePanGesture(_:)))
    addGestureRecognizer(panGR)
}
@objc func handlePanGesture(_ gestureRecognizer: NSPanGestureRecognizer) {
    let displacement: CGPoint = gestureRecognizer.translation(in: self)
    handlePan(displacement: displacement, changed: gestureRecognizer.state == .changed)
}
#endif
  
#if os(iOS) || os(tvOS)
private func setupPanGestureRecognizer() {
    let panGR = UIPanGestureRecognizer(target: self, action: #selector(handlePanGesture(_:)))
    addGestureRecognizer(panGR)
}
  
@objc func handlePanGesture(_ gestureRecognizer: UIPanGestureRecognizer) {
    let displacement: CGPoint = gestureRecognizer.translation(in: self)
    
    handlePan(displacement: displacement, changed: gestureRecognizer.state == .changed)
    
    if gestureRecognizer.state == .changed {
      gestureRecognizer.setTranslation(.zero, in: self)
    }
}
#endif
</code></pre><p>We can also add a simple rotation transform for the rotation events/ gestures.</p><pre><code class="language-swift">  override func rotationChanged(radians: Float) {
    let transform = transformedLayer.sublayerTransform
    let rot = CATransform3DRotate(transform, CGFloat(radians), 0, 1, 0)
    transformedLayer.sublayerTransform = rot
  }
</code></pre><p>And scale, in all three axes:</p><pre><code class="language-swift">  override func scaleChanged(scale: CGFloat) {
    let scaleTransform = CATransform3DScale(transformedLayer.sublayerTransform, scale, scale, scale)
    transformedLayer.sublayerTransform = scaleTransform
  }
</code></pre><p>The <code>tap</code> turns on and off our 3D transform</p><pre><code class="language-swift">  override func tapHappened() {
    set3DCube(on: isOn)
  }
</code></pre><p>Here’s the 3D cube code</p><pre><code class="language-swift">  func set3DCube(on: Bool) {
    side4.layer.zPosition = on ? CACube3DView.sideWidth : 1
    side1.layer.transform = on ? CATransform3D.transformFor3DCubeSide(1, zWidth: CACube3DView.sideWidth) : CATransform3DIdentity
    side2.layer.transform = on ? CATransform3D.transformFor3DCubeSide(2, zWidth: CACube3DView.sideWidth) : CATransform3DIdentity
    side3.layer.transform = on ? CATransform3D.transformFor3DCubeSide(3, zWidth: CACube3DView.sideWidth) : CATransform3DIdentity
    side4.layer.transform = on ? CATransform3D.transformFor3DCubeSide(4, zWidth: CACube3DView.sideWidth) : CATransform3DIdentity
    side5.layer.transform = on ? CATransform3D.transformFor3DCubeSide(5, zWidth: CACube3DView.sideWidth) : CATransform3DIdentity
    side6.layer.transform = on ? CATransform3D.transformFor3DCubeSide(6, zWidth: CACube3DView.sideWidth) : CATransform3DIdentity
  }
</code></pre><p>We either set the <code>identity transform</code>, which means <code>no transform</code>, to our cube sides, or the transform appropriate for that particular side.</p><h2>6. macOS Troubles</h2><p>I suppose I need to do further investigation in how <code>macOS</code> treats layers of <code>NSView</code>, for this little experiment is not working on the <code>macOS</code>, yet.<br />Here’s how the flattened cube looks on the <code>macOS</code></p><p><img src="https://www.aleahim.com/images/cacube/12_cube_macOS_flat_messed_up.png" alt="" class="img-fluid"></p><p>So, the positioning of the layers is not respected.</p><p>And here is the cube in 3D:</p><p><img src="https://www.aleahim.com/images/cacube/13_cube_macOS_3D_messed_up.png" alt="" class="img-fluid"></p><p>I did try to force the <code>isGeometryFlipped = true</code> everywhere. Anyway this needs more work.</p><p>If you want to help with the <code>macOS</code> implementation, please, be my guest.</p><p>Here’s a link to a GitHub repo with the source code:<br /><a href="https://github.com/mihaelamj/CubeIn3DWithCoreAnimation">Core Animation 3D Cube</a></p>]]></content:encoded></item></channel></rss>